Programming Assignment 2
________________________
@author Alexander Telich
@author Daniel Luo
@author Patrick Do



AstarNode class:
This class is meant to represent a node or space on the gameboard.
It is used to get neighbors and then use that information in the AstarAgent to make decisions.

    PRIVATE FIELDS:
        x,y: x and y coordinates of the node
        mapLocation: MapLocation of the node
        generatedMap: 2D array for the map
        gameMap: The GameMap object stored by node
        cachedHeuristic: Stores the heuristic for the node if necessary

    Constructor:
        Takes the x, y, mapLocation, generatedMap, and gameMap to set it to the private fields.

    getHeuristic(AstarAgent.MapLocation goal):
        Gets the heuristic function to the goal, which is the Chebyshev distance.

    getNeighbors():
        Method getNeighbors gets the AstarNode that are neighbors of the current AstarNode

             *
              Quadrants:

                  |    1
               4  |
                  |-----
                  |*|
               -----|
                    |  2
               3    |

        We will add the neighbors to the array in order of quadrants
        First two go to Q1, next 2 go to Q2, next two go to Q3, and last two go to Q4
        Returns an array of AstarNodes ordered by quadrant.

    *Getter and Setter Methods also included for some fields

    equals(Object o):
        Overrides the equals method and considers AstarNodes equal if they have the same X and Y values.


GameMap class:
    PRIVATE FIELDS:
        generatedMap: 2D array for the map
        enemyLocation: stores the location of the enemy on the map

    Constructor:
        Instantiates private fields, adds the resource locations and enemy location and townhall location.

    *Getter Methods also included

    updateEnemyLocation(AstarAgent.MapLocation enemyFootmanLoc):
        Updates the enemy location and places it on the generated map

    addResourceLocations(Set<AstarAgent.MapLocation> resourceLocations, int[][] generatedMap):
        Adds the resource locations onto the GameMap's generated map

    addTownHallLocation(AstarAgent.MapLocation townHallLoc):
        Adds the townhall location to the GameMap's generated map

    printMap():
        Prints out a string form of the generated map of the GameMap


AstarAgent class:
This class carries out planning and execution of actions for the AstarAgent using its AstarSearch

    gameMap: the GameMap being traversed
    cachedNeighbors: HashMap of the neighbors that have been traversed
    startLoc1: starting location of AstarAgent
    pathReplanCount: boolean representing whether or not path has been replanned

    path: stack of MapLocations representing the path being considered to travel
    footmanID, townhallID, enemyFootmanID: integer IDs of footman, townhall, and enemy footmen
    nextLoc: stores the next location to travel for AstarAgent
    totalPlanTime: holds the total planning time taken
    totalExecutionTime: holds the time taken to execute action

    Constructor:
        Sets the player number of the AstarAgent

    initialStep(State.StateView newstate, History.HistoryView statehistory):
        The first step taken at the start of the game.
        Checks for errors in the game and then instantiates the GameMap and adds all of the resource, enemy, and
            townhall locations to the map.

    middleStep(State.StateView newstate, History.HistoryView statehistory):
        The agent finds a path to the goal and travels down that path if it doesn't need to replan.
        Agent must also check to see if there is a next location and act depending on whether or not there is.

    terminalStep(State.StateView newstate, History.HistoryView statehistory):
        Prints out the total number of turns taken, the plan time, the execution time, and the total time taken.

    shouldReplanPath(State.StateView state, Stack<MapLocation> currentPath):
        Checks if the agent should replan its path, depending on whether or not the enemy has moved.

    findPath(State.StateView state):
        Finds a path to the goal node given the current state of the game.

    AstarSearch(MapLocation start, MapLocation goal):
        Uses our searching algorithm for Astar, which also attempts to reduce time in some cases by using a goal-based
            quadrant search.

    MapLocation inner class:
        Holds the x and y locations of the location on the map.

    equals(Object obj):
        Overrides the equals method and considers AstarNodes equal if they have the same X and Y coordinates.

    Quadrant class:
        getQuadrant(int x, int y):
            Gets the quadrant that the goal node is in in relation to the current node given x,y coordinates.
        getQuadrantArea(int x, int y)
            Gets the area of the quadrant from the current node to corner of the board (the corner where the goal lies)


testGameMap class:
This class is meant to test whether or not the GameMap is instantiated correctly along with its generated map.

    arrayToString(int[][] arr):
    Takes an array and returns a String representation of the 2D array.

    main(String[] args):
    Creates an int 2D array of a possible GameMap
    Writes the locations of enemy, resources, and townhall
    Creates a GameMap with inputs of the above locations
    Tests to see if the control 2D array is the same as the generated map of created GameMap; returns true if they are
        the same and false if they are not
    ***The test is passed










